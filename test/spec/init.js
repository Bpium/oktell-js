// Generated by CoffeeScript 1.6.3
var caseActions, numbers, oktell, onNumbersState, setNumberState, subscribeToEvents, _events, _karmaServerWaitServers, _onNumberStateCallbacks, _waitKarmaServerEventName,
  __slice = [].slice;

oktell = null;

numbers = {};

_onNumberStateCallbacks = [];

_events = [];

_karmaServerWaitServers = {};

_waitKarmaServerEventName = "waitKarmaServer";

subscribeToEvents = function(ok) {
  ok.on('all', function() {
    var args, event;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return _events.push({
      event: event,
      args: args
    });
  });
  return ok.onCustomEvent(_waitKarmaServerEventName, function(data) {
    var s, ss, _i, _len, _results;
    ss = data.servers.split(',');
    _results = [];
    for (_i = 0, _len = ss.length; _i < _len; _i++) {
      s = ss[_i];
      _results.push(_karmaServerWaitServers[s] = true);
    }
    return _results;
  });
};

setNumberState = function(num, state) {
  var allReady, cNum, n, obj, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
  if (num && (state != null)) {
    numbers[num] = state;
  }
  _results = [];
  for (_i = 0, _len = _onNumberStateCallbacks.length; _i < _len; _i++) {
    obj = _onNumberStateCallbacks[_i];
    allReady = true;
    _ref = obj[0];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      n = _ref[_j];
      cNum = (_ref1 = Object.keys(n)) != null ? _ref1[0] : void 0;
      if (cNum && numbers[cNum] !== n[cNum]) {
        allReady = false;
      }
    }
    if (allReady) {
      _results.push((_ref2 = obj[1]) != null ? typeof _ref2.apply === "function" ? _ref2.apply(obj[2] || window) : void 0 : void 0);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

onNumbersState = function(nums, fn, context) {
  if (context == null) {
    context = window;
  }
  _onNumberStateCallbacks.push([nums, fn, context]);
  return setNumberState();
};

caseActions = {
  restart: function(after) {
    var callbackData, connect, defer, okServer, onMediaRequestSuccess, tests;
    defer = $.Deferred();
    callbackData = false;
    okServer = okServers[serverNumber];
    console.log("oktell connect params: host " + okServer.host + ", login " + okServer.login + ", pass " + okServer.pass + ", with webrtc= " + okServer.oktellVoice);
    tests = function() {
      expect(callbackData != null ? callbackData.result : void 0).toBeTruthy();
      expect(oktell.getMyInfo().login).toBe(okServer.login);
      return defer.resolve();
    };
    connect = function() {
      return oktell.connect({
        url: okServer.host,
        login: okServer.login,
        password: okServer.pass,
        oktellVoice: okServer.oktellVoice ? oktellVoice : false,
        callback: function(data) {
          var interval, timer;
          callbackData = data;
          if (!okServer.oktellVoice) {
            return tests();
          } else {
            timer = setTimeout(function() {
              clearInterval(interval);
              return defer.rejectWith(window, ['webrtc connect timeout']);
            }, 10000);
            return interval = setInterval(function() {
              if (oktell.webphoneIsActive()) {
                clearInterval(interval);
                clearTimeout(timer);
                return tests();
              }
            }, 20);
          }
          /*
          
          					onNumbersState [oktell.getMyInfo().number, 301], 1, ->
          						if oktell.getMyInfo().number.toString() is '300'
          							oscillator.frequency = 1000
          							setTimeout ->
          								oktell.call(106)
          							, 1000
          
          					oktell.on 'ringStart', ->
          						setTimeout ->
          							oktell.answer()
          
          							setTimeout ->
          								oktell.endCall()
          							, talkTime
          
          						, 1000
          
          					oktell.on 'talkStop', ->
          						setTimeout ->
          							complete = true
          						, 1000
          */

        }
      });
    };
    onMediaRequestSuccess = function() {
      return connect();
    };
    oktellVoice.createUserMedia(onMediaRequestSuccess);
    return defer.promise();
  },
  waitStatus: function(waitNumbers, timeout) {
    var defer, timer;
    if (timeout == null) {
      timeout = 10000;
    }
    defer = $.Deferred();
    if (_.size(numbers) === 0) {
      oktell.onNativeEvent('pbxnumberstatechanged', function(data) {
        var n, _i, _len, _ref, _results;
        _ref = data.numbers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(setNumberState(n.num, n.numstateid));
        }
        return _results;
      });
      oktell.exec('getpbxnumbers', {
        mode: 'full'
      }, function(data) {
        var n, _i, _len, _ref, _results;
        _ref = data.numbers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(setNumberState(n.number, n.state));
        }
        return _results;
      });
    }
    timer = setTimeout(function() {
      return defer.rejectWith(window, ['wait status timeout']);
    }, timeout);
    onNumbersState(waitNumbers, function() {
      clearTimeout(timer);
      return defer.resolve();
    });
    return defer.promise();
  },
  checkEvents: function(events) {
    var defer;
    defer = $.Deferred();
    setTimeout(function() {
      var allArgsEqual, allEvents, args, currI, found, foundCount, i, j, k, sArg, searchArgs, searchEvent, _i, _j, _k, _len, _len1, _ref, _ref1;
      allEvents = _events;
      _events = [];
      found = [];
      foundCount = 0;
      currI = 0;
      for (j = _i = 0, _len = events.length; _i < _len; j = ++_i) {
        searchEvent = events[j];
        found.push(searchEvent[0] + " - NOT found");
        for (i = _j = currI, _ref = allEvents.length; currI <= _ref ? _j < _ref : _j > _ref; i = currI <= _ref ? ++_j : --_j) {
          if (((_ref1 = allEvents[i]) != null ? _ref1.event : void 0) === searchEvent[0]) {
            allArgsEqual = true;
            args = allEvents[i].args;
            searchArgs = searchEvent[1];
            if (searchArgs) {
              for (k = _k = 0, _len1 = searchArgs.length; _k < _len1; k = ++_k) {
                sArg = searchArgs[k];
                if (_.isObject(sArg)) {
                  sArg = _.extend({}, args[k], sArg);
                }
                if ((sArg != null) && !_.isEqual(args[k], sArg)) {
                  allArgsEqual = false;
                }
              }
            }
            if (allArgsEqual) {
              currI = i;
              foundCount++;
              found[found.length - 1] = searchEvent[0] + " - found";
              break;
            }
          }
        }
      }
      if (events.length === foundCount) {
        return defer.resolve();
      } else {
        return defer.rejectWith(window, ["not all events found: " + (found.join(', ')) + " | all " + (JSON.stringify(allEvents))]);
      }
    }, 1);
    return defer.promise();
  },
  timeout: function(time) {
    var defer;
    defer = $.Deferred();
    setTimeout(function() {
      return defer.resolve();
    }, time);
    return defer.promise();
  },
  disconnect: function() {
    var defer;
    defer = $.Deferred();
    oktell.exec('logout');
    setTimeout(function() {
      return defer.resolve();
    }, 1000);
    return defer.promise();
  },
  waitKarmaServer: function(servers, timeout) {
    var defer, interval, timer;
    if (timeout == null) {
      timeout = 5000;
    }
    defer = $.Deferred();
    timer = setTimeout(function() {
      return defer.rejectWith(window, ["not all karma servers ready: " + (JSON.stringify(_karmaServerWaitServers))]);
    }, timeout);
    interval = setInterval(function() {
      var ready, server, _i, _len;
      ready = true;
      for (_i = 0, _len = servers.length; _i < _len; _i++) {
        server = servers[_i];
        if (server !== serverNumber && !_karmaServerWaitServers[server]) {
          ready = false;
        }
      }
      _karmaServerWaitServers[serverNumber] = true;
      oktell.triggerCustomEvent(_waitKarmaServerEventName, false, {
        servers: Object.keys(_karmaServerWaitServers).join(',')
      }, true);
      if (ready) {
        clearInterval(interval);
        clearTimeout(timer);
        return defer.resolve();
      }
    }, 500);
    return defer.promise();
  }
};

describe('test cases', function() {
  return describe('first case', function() {
    return it('should run all actions successfully', function() {
      var actionsComplete, successRun;
      successRun = false;
      actionsComplete = false;
      oktell = new Oktell;
      subscribeToEvents(oktell);
      runs(function() {
        var currentI, go, promise;
        currentI = 0;
        promise = null;
        go = function() {
          var action, currCase, _ref, _ref1;
          if (currentI < cases.length) {
            currCase = cases[currentI];
            if (((_ref = currCase.targets) != null ? typeof _ref.indexOf === "function" ? _ref.indexOf(serverNumber) : void 0 : void 0) === -1) {
              currentI++;
              go();
              return;
            }
            action = currCase.action;
            promise = (_ref1 = caseActions[action]) != null ? _ref1.apply(void 0, currCase.params || []) : void 0;
            currentI++;
            return promise.then(function() {
              return go();
            }, function(msg) {
              console.error("" + serverNumber + " server error on action '" + action + "' with: " + msg);
              return actionsComplete = true;
            });
          } else {
            return promise.then(function() {
              successRun = true;
              return actionsComplete = true;
            });
          }
        };
        return go();
      });
      waitsFor(function() {
        return actionsComplete;
      }, 'should run all cases', 1000000);
      return runs(function() {
        if (!successRun) {
          return console.log("ERROR !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        }
      });
    });
  });
});
