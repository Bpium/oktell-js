// Generated by CoffeeScript 1.6.3
var i, numbers, onNumbersState, setNumberState, _i, _onNumberStateCallbacks;

numbers = {};

for (i = _i = 300; _i <= 309; i = ++_i) {
  numbers[i] = 0;
}

_onNumberStateCallbacks = [];

onNumbersState = function(nums, state, fn, context) {
  if (context == null) {
    context = window;
  }
  return _onNumberStateCallbacks.push([nums, state, fn, context]);
};

setNumberState = function(num, state) {
  var allReady, n, obj, _j, _k, _len, _len1, _ref, _ref1, _results;
  if (numbers[num] != null) {
    numbers[num] = state;
    _results = [];
    for (_j = 0, _len = _onNumberStateCallbacks.length; _j < _len; _j++) {
      obj = _onNumberStateCallbacks[_j];
      allReady = true;
      _ref = obj[0];
      for (_k = 0, _len1 = _ref.length; _k < _len1; _k++) {
        n = _ref[_k];
        if (numbers[n] !== obj[1]) {
          allReady = false;
        }
      }
      if (allReady) {
        _results.push((_ref1 = obj[2]) != null ? typeof _ref1.apply === "function" ? _ref1.apply(obj[3] || window) : void 0 : void 0);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

describe('server connect', function() {
  return it('should call callback', function() {
    var analyser, callbackData, complete, connect, context, okServer, oktell, onMediaRequestSuccess, oscillator, remote, talkTime;
    okServer = okServers[location.port - 9000];
    console.log("oktell connect params: host:" + okServer.host + ", login: " + okServer.login + ", pass " + okServer.pass);
    complete = false;
    callbackData = false;
    oktell = new Oktell;
    window.oktell = oktell;
    window.oktellVoice = oktellVoice;
    talkTime = 3000;
    context = new webkitAudioContext;
    oscillator = context.createOscillator();
    remote = context.createMediaStreamDestination();
    oscillator.connect(remote);
    oktellVoice._localMediaStream = remote.stream;
    analyser = context.createAnalyser();
    analyser.fftSize = 2048;
    connect = function() {
      return oktell.connect({
        url: okServer.host,
        login: okServer.login,
        password: okServer.pass,
        oktellVoice: okServer.oktellVoice ? oktellVoice : false,
        callback: function(data) {
          var src;
          src = null;
          remote = null;
          callbackData = data;
          oktell.onNativeEvent('pbxnumberstatechanged', function(data) {
            var n, _j, _len, _ref, _results;
            _ref = data.numbers;
            _results = [];
            for (_j = 0, _len = _ref.length; _j < _len; _j++) {
              n = _ref[_j];
              _results.push(setNumberState(n.num, n.numstateid));
            }
            return _results;
          });
          oktell.exec('getpbxnumbers', {
            mode: 'full'
          }, function(data) {
            var n, _j, _len, _ref, _results;
            _ref = data.numbers;
            _results = [];
            for (_j = 0, _len = _ref.length; _j < _len; _j++) {
              n = _ref[_j];
              _results.push(setNumberState(n.number, n.state));
            }
            return _results;
          });
          onNumbersState([oktell.getMyInfo().number, 301], 1, function() {
            if (oktell.getMyInfo().number.toString() === '300') {
              oscillator.frequency = 1000;
              return setTimeout(function() {
                return oktell.call(106);
              }, 1000);
            }
          });
          oktell.on('ringStart', function() {
            return setTimeout(function() {
              oktell.answer();
              return setTimeout(function() {
                return oktell.endCall();
              }, talkTime);
            }, 1000);
          });
          oktell.on('talkStart', function() {
            return setTimeout(function() {
              setTimeout(function() {
                return oscillator.start(0);
              }, 1000);
              return setTimeout(function() {
                return oscillator.stop(0);
              }, 3000);
            }, 1000);
          });
          return oktell.on('talkStop', function() {
            return setTimeout(function() {
              return complete = true;
            }, 1000);
          });
        }
      });
    };
    onMediaRequestSuccess = function() {
      return connect();
    };
    runs(function() {
      return oktellVoice.createUserMedia(onMediaRequestSuccess);
    });
    waitsFor(function() {
      return complete;
    }, "connect callback should be called", talkTime + 10000);
    return runs(function() {
      expect(callbackData != null ? callbackData.result : void 0).toBeTruthy();
      expect(oktell.webphoneIsActive()).toBeTruthy();
      return expect(oktell.getMyInfo().login).toBe(okServer.login);
    });
  });
});
