// Generated by CoffeeScript 1.6.3
var OktellServerConfig, cases, karmaStartPort, okServers, okServersCount, serverNumber, _i, _results;

OktellServerConfig = (function() {
  function OktellServerConfig(host, login, pass, oktellVoice) {
    this.host = host;
    this.login = login;
    this.pass = pass;
    this.oktellVoice = oktellVoice;
  }

  return OktellServerConfig;

})();

karmaStartPort = 9000;

okServers = [new OktellServerConfig('ws://192.168.0.61:4066', 'b300', 'b300', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b300', 'b300', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b300', 'b300', false), new OktellServerConfig('ws://192.168.0.61:4066', 'b301', 'b301', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b301', 'b301', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b301', 'b301', false), new OktellServerConfig('ws://192.168.0.61:4066', 'b302', 'b302', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b302', 'b302', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b302', 'b302', false), new OktellServerConfig('ws://192.168.0.61:4066', 'b303', 'b303', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b303', 'b303', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b303', 'b303', false), new OktellServerConfig('ws://192.168.0.61:4066', 'b304', 'b304', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b304', 'b304', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b304', 'b304', false), new OktellServerConfig('ws://192.168.0.61:4066', 'b305', 'b305', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b305', 'b305', true), new OktellServerConfig('ws://192.168.0.61:4066', 'b305', 'b305', false)];

okServersCount = 2;

serverNumber = location.port - karmaStartPort;

({
  actionTypes: {
    restart: 'перезапустить соединение',
    waitStatus: 'ожидание указанного статуса для целей',
    checkEvents: 'проверка цепочки вызванных событий с последующей очисткой цепочки',
    timeout: 'таймаут'
  }
});

cases = [
  {
    action: 'timeout',
    params: [parseInt(1000 + 1500 * serverNumber)]
  }, {
    action: 'restart'
  }, {
    action: 'waitKarmaServer',
    params: [
      (function() {
        _results = [];
        for (var _i = 0; 0 <= okServersCount ? _i < okServersCount : _i > okServersCount; 0 <= okServersCount ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), 60000
    ]
  }, {
    action: 'checkEvents',
    params: [[['stateChange', ['ready']], ['readyStart']]]
  }, {
    action: 'disconnect'
  }
];
