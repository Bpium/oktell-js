// Generated by CoffeeScript 1.8.0
(function() {
  module.exports = function(grunt) {
    var concurrentConfig, i, karmaConfig, karmaServersCount, karmaStartPort, karmaTestConfig, myConf, taskName, userDir, _i, _ref, _ref1, _ref2;
    require('load-grunt-tasks')(grunt);
    require('time-grunt')(grunt);
    myConf = {
      build: 'build',
      version: '1.7.2',
      chromePath: 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe',
      karmaChromeUsersDir: 'c:/www/karmaTestChromeUserDir'
    };
    karmaTestConfig = grunt.file.read('test/config.coffee');
    karmaStartPort = parseInt((_ref = karmaTestConfig.match(/karmaStartPort[ ]*=[ ]*([0-9]{4,5})/)) != null ? _ref[1] : void 0);
    karmaServersCount = parseInt((_ref1 = karmaTestConfig.match(/okServersCount[ ]*=[ ]*([0-9]{1,5})/)) != null ? _ref1[1] : void 0);
    console.log("karmaStartPort = " + karmaStartPort + ", karmaServersCount = " + karmaServersCount);
    concurrentConfig = {
      test: {
        tasks: [],
        options: {
          limit: 50,
          logConcurrentOutput: false
        }
      }
    };
    karmaConfig = {
      options: {
        autoWatch: false,
        configFile: 'karma.conf.js',
        singleRun: true,
        customLaunchers: {}
      }
    };
    for (i = _i = karmaStartPort, _ref2 = karmaStartPort + karmaServersCount - 1; karmaStartPort <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = karmaStartPort <= _ref2 ? ++_i : --_i) {
      taskName = 'server' + i;
      userDir = myConf.karmaChromeUsersDir + '/' + i;
      if (!grunt.file.isDir(userDir)) {
        grunt.file.mkdir(userDir);
      }
      karmaConfig.options.customLaunchers[taskName] = {
        base: 'ChromeCanary',
        flags: ['--user-data-dir=' + (userDir.replace(/\//g, '\\\\'))]
      };
      karmaConfig[taskName] = {
        port: i,
        browsers: [taskName]
      };
      concurrentConfig.test.tasks.push('karma:' + taskName);
    }
    grunt.initConfig({
      myConf: myConf,
      concat: {
        build: {
          options: {
            banner: "/*\n * Oktell.js\n * version <%= myConf.version %>\n * http://js.oktell.ru/\n */\n\n"
          },
          files: [
            {
              src: ['oktell.js'],
              dest: '<%= myConf.build %>/oktell.js'
            }
          ]
        }
      },
      uglify: {
        build: {
          files: {
            '<%= myConf.build %>/oktell.min.js': ['<%= myConf.build %>/oktell.js']
          }
        }
      },
      replace: {
        build: {
          src: ['oktell.*'],
          overwrite: true,
          replacements: [
            {
              from: /self.version = '[0-9\.]+'/g,
              to: "self.version = '<%= myConf.version %>'"
            }
          ]
        },
        bower: {
          src: ['bower.json'],
          overwrite: true,
          replacements: [
            {
              from: /"version": "[0-9\.]+",/,
              to: '"version": "<%= myConf.version %>",'
            }
          ]
        }
      },
      karma: karmaConfig,
      concurrent: concurrentConfig,
      parallel: {
        assets: {
          options: {
            grunt: true
          },
          tasks: ['karma:first', 'karma:second']
        }
      }
    });
    grunt.registerTask('build', ['replace', 'concat:build', 'uglify:build']);
    return grunt.registerTask('default', ['build']);
  };

}).call(this);
