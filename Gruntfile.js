// Generated by CoffeeScript 1.6.3
module.exports = function(grunt) {
  var concurrentConfig, i, karmaConfig, karmaServersCount, karmaStartPort, myConf, taskName, userDir, _i, _ref;
  require('load-grunt-tasks')(grunt);
  require('time-grunt')(grunt);
  myConf = {
    build: 'build',
    version: '1.6.0',
    chromePath: 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe',
    karmaChromeUsersDir: 'c:/www/karmaTestChromeUserDir'
  };
  karmaStartPort = 9000;
  karmaServersCount = 2;
  concurrentConfig = {
    test: {
      tasks: [],
      options: {
        limit: 50,
        logConcurrentOutput: true
      }
    }
  };
  karmaConfig = {
    options: {
      autoWatch: true,
      configFile: 'karma.conf.js',
      singleRun: false,
      customLaunchers: {}
    }
  };
  for (i = _i = karmaStartPort, _ref = karmaStartPort + karmaServersCount - 1; karmaStartPort <= _ref ? _i <= _ref : _i >= _ref; i = karmaStartPort <= _ref ? ++_i : --_i) {
    taskName = 'server' + i;
    userDir = myConf.karmaChromeUsersDir + '/' + i;
    if (!grunt.file.isDir(userDir)) {
      grunt.file.mkdir(userDir);
    }
    karmaConfig.options.customLaunchers[taskName] = {
      base: 'ChromeCanary',
      flags: ['--user-data-dir=' + (userDir.replace(/\//g, '\\\\'))]
    };
    karmaConfig[taskName] = {
      port: i,
      browsers: [taskName]
    };
    concurrentConfig.test.tasks.push('karma:' + taskName);
  }
  grunt.initConfig({
    myConf: myConf,
    concat: {
      build: {
        options: {
          banner: "/*\n * Oktell.js\n * version <%= myConf.version %>\n * http://js.oktell.ru/\n */\n\n"
        },
        files: [
          {
            src: ['oktell.js'],
            dest: '<%= myConf.build %>/oktell.js'
          }
        ]
      }
    },
    uglify: {
      build: {
        files: {
          '<%= myConf.build %>/oktell.min.js': ['<%= myConf.build %>/oktell.js']
        }
      }
    },
    replace: {
      build: {
        src: ['oktell.*'],
        overwrite: true,
        replacements: [
          {
            from: /self.version = '[0-9\.]+'/g,
            to: "self.version = '<%= myConf.version %>'"
          }
        ]
      },
      bower: {
        src: ['bower.json'],
        overwrite: true,
        replacements: [
          {
            from: /"version": "[0-9\.]+",/,
            to: '"version": "<%= myConf.version %>",'
          }
        ]
      }
    },
    karma: karmaConfig,
    concurrent: concurrentConfig,
    parallel: {
      assets: {
        options: {
          grunt: true
        },
        tasks: ['karma:first', 'karma:second']
      }
    }
  });
  grunt.registerTask('build', ['replace', 'concat:build', 'uglify:build']);
  return grunt.registerTask('default', ['build']);
};
